(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("video.js"), require("hls.js"));
	else if(typeof define === 'function' && define.amd)
		define(["video.js", "hls.js"], factory);
	else if(typeof exports === 'object')
		exports["HlsjsVideojsPluginExternal"] = factory(require("video.js"), require("hls.js"));
	else
		root["HlsjsVideojsPluginExternal"] = factory(root["videojs"], root["Hls"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__0__;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/***
 * @author Stephan Hesse <stephan@emliri.com>
 * @copyright (c) (2018) Stephan Hesse, Emliri
 * @copyright Peer5
 * @license Apache2.0
 *
 * Videojs HLS Source-handler plugin using Hls.js
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Hls = __webpack_require__(1);
var video_js_1 = __webpack_require__(0);
function plugin(HlsjsConstructor, videojsLib) {
    if (!videojsLib || !HlsjsConstructor) {
        return;
    }
    Hls = HlsjsConstructor;
    video_js_1.default = videojsLib;
    /**
     * creates an error handler function
     */
    function makeErrorHandler(hls) {
        var _recoverDecodingErrorDate = null;
        var _recoverAudioCodecErrorDate = null;
        return function () {
            var now = Date.now();
            if (!_recoverDecodingErrorDate || (now - _recoverDecodingErrorDate) > 2000) {
                _recoverDecodingErrorDate = now;
                hls.recoverMediaError();
            }
            else if (!_recoverAudioCodecErrorDate || (now - _recoverAudioCodecErrorDate) > 2000) {
                _recoverAudioCodecErrorDate = now;
                hls.swapAudioCodec();
                hls.recoverMediaError();
            }
            else {
                console.error('Error loading media: File could not be played');
            }
        };
    }
    /**
     * Videojs Source-handler plugin for Hls.js
     * @class
     * @constructor
     */
    var Html5HlsJS = /** @class */ (function () {
        function Html5HlsJS(source, tech) {
            var _this = this;
            var options = tech.options_;
            var el = this.el = tech.el();
            var hls = this.hls = new Hls(options.hlsjsConfig);
            // create separate error handlers for hlsjs and the video tag
            var hlsjsErrorHandler = makeErrorHandler(hls);
            var videoTagErrorHandler = makeErrorHandler(hls);
            // listen to error events coming from the video tag
            el.addEventListener('error', function (e) {
                var mediaError = _this.el.error;
                if (mediaError.code === mediaError.MEDIA_ERR_DECODE) {
                    videoTagErrorHandler();
                }
                else {
                    console.error('Error loading media: File could not be played');
                }
            });
            // update live status on level load
            hls.on(Hls.Events.LEVEL_LOADED, function (event, data) {
                _this._duration = data.details.live ? Infinity : data.details.totalduration;
            });
            // try to recover on fatal errors
            hls.on(Hls.Events.ERROR, function (event, data) {
                if (data.fatal) {
                    switch (data.type) {
                        case Hls.ErrorTypes.NETWORK_ERROR:
                            hls.startLoad();
                            break;
                        case Hls.ErrorTypes.MEDIA_ERROR:
                            hlsjsErrorHandler();
                            break;
                        default:
                            console.error('Error loading media: File could not be played');
                            break;
                    }
                }
            });
            Object.keys(Hls.Events).forEach(function (key) {
                var eventName = Hls.Events[key];
                hls.on(eventName, function (event, data) {
                    tech.trigger(eventName, data);
                });
            });
            // Intercept native TextTrack calls and route to video.js directly only
            // if native text tracks are not supported on this browser.
            if (!tech.featuresNativeTextTracks) {
                Object.defineProperty(el, 'textTracks', {
                    value: tech.textTracks,
                    writable: false
                });
                el.addTextTrack = function () {
                    return tech.addTextTrack.apply(tech, arguments);
                };
            }
            // attach hlsjs to videotag
            hls.attachMedia(this.el);
            hls.loadSource(source.src);
        }
        /**
         * Returns duration of media
         */
        Html5HlsJS.prototype.duration = function () {
            return this._duration || this.el.duration || 0;
        };
        /**
         * Dispose
         */
        Html5HlsJS.prototype.dispose = function () {
            this.hls.destroy();
        };
        return Html5HlsJS;
    }());
    var HLS_MIME_TYPE_REGEX = /^application\/(x-mpegURL|vnd\.apple\.mpegURL)$/i;
    var HLS_M3U8_EXT_REGEX = /\.m3u8/i;
    /**
     * The static plugin factory for our source-handler
     * @class
     */
    var HlsSourceHandlerPlugin = /** @class */ (function () {
        function HlsSourceHandlerPlugin() {
        }
        HlsSourceHandlerPlugin.canHandleSource = function (source) {
            if (source.skipContribHlsJs) {
                return '';
            }
            else if (HLS_MIME_TYPE_REGEX.test(source.type)) {
                return 'probably';
            }
            else if (HLS_M3U8_EXT_REGEX.test(source.src)) {
                return 'maybe';
            }
            else {
                return '';
            }
        };
        HlsSourceHandlerPlugin.handleSource = function (source, tech) {
            return new Html5HlsJS(source, tech);
        };
        HlsSourceHandlerPlugin.canPlayType = function (type) {
            if (HLS_MIME_TYPE_REGEX.test(type)) {
                return 'probably';
            }
            return '';
        };
        return HlsSourceHandlerPlugin;
    }());
    if (!Hls.isSupported()) {
        console.warn('Hls.js is not supported on this platform');
        return;
    }
    var html5Tech = video_js_1.default.getTech && video_js_1.default.getTech('Html5'); // videojs6 (partially on videojs5 too)
    html5Tech = html5Tech || (video_js_1.default.getComponent && video_js_1.default.getComponent('Html5')); // videojs5 (we use videojs 7 typings)
    if (html5Tech) {
        html5Tech.registerSourceHandler(HlsSourceHandlerPlugin, 0);
    }
}
plugin(Hls || window.Hls, video_js_1.default || window.videojs);
exports.default = plugin;


/***/ })
/******/ ])["default"];
});
//# sourceMappingURL=HlsjsVideojsPluginExternal.min.js.map